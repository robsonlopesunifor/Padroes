public class ListaLigada implements ListaLigadaInterface
{
	private Celula primeira;
	private Celula ultima;
	private int totalDeElementos;
	
	public ListaLigada()
	{
		super();
	}
	
	@Override
	public void mostrar() 
	{
		Celula auxiliar = this.primeira;
		
		while ( auxiliar != null )
		{
			System.out.println ( auxiliar.getElemento() );
			auxiliar = auxiliar.getProxima();
		} 
	}

	@Override
	public void adicionaNoComeco(Object elemento) 
	{
		if(this.totalDeElementos == 0){
		    Celula nova = new Celula(elemento);
		    this.primeira = nova;
		    this.ultima = nova;
		  } else {
		    Celula nova = new Celula(this.primeira, elemento);
		    this.primeira.setAnterior(nova);
		    this.primeira = nova;
		  }
		  this.totalDeElementos++;
	}
	
	@Override
	public void adicionaNoFinal(Object elemento)
	{
		if(this.totalDeElementos == 0){
		    Celula nova = new Celula(elemento);
		    this.primeira = nova;
		    this.ultima = nova;
		  } else {
		    Celula nova = new Celula(this.primeira, elemento);
		    this.primeira.setAnterior(nova);
		    this.primeira = nova;
		  }
		  this.totalDeElementos++;
		
	}
	
	@Override
	public void adiciona(Object elemento) 
	{
		if (this.totalDeElementos == 0) {
		    this.adicionaNoComeco(elemento);
		  } else {
		    Celula nova = new Celula(elemento);
		    this.ultima.setProxima(nova);
		    nova.setAnterior(this.ultima);
		    this.ultima = nova;
		    this.totalDeElementos++;
		  }
	}
	
	@Override
	public void adiciona(int posicao, Object elemento)
	{
		if(posicao == 0){ // No começo.
		    this.adicionaNoComeco(elemento);
		  } else if(posicao == this.totalDeElementos){ // No fim.
		    this.adiciona(elemento);
		  } else {
		    Celula anterior = this.pegaCelula(posicao - 1);
		    Celula proxima = anterior.getProxima();
		    Celula nova = new Celula(anterior.getProxima(), elemento);
		    nova.setAnterior(anterior);
		    anterior.setProxima(nova);
		    proxima.setAnterior(nova);
		    this.totalDeElementos++;
		  }
	}
	

	@Override
	public void removeDoComeco() 
	{
	    this.primeira = this.primeira.getProxima();
	    
	    this.totalDeElementos--;
	}

	@Override
	public void removeDoFim() 
	{
		if (!this.posicaoOcupada(this.totalDeElementos - 1)) {
		    throw new IllegalArgumentException("Posição não existe");
		  }
		  if (this.totalDeElementos == 1) {
		    this.removeDoComeco();
		  } else {
		    Celula penultima = this.ultima.getAnterior();
		    penultima.setProxima(null);
		    this.ultima = penultima;
		    this.totalDeElementos--;
		  }
	}
	
	@Override
	public void removePosicao(int posicao) {
		  if (!this.posicaoOcupada(posicao)) {
		    throw new IllegalArgumentException("Posição não existe");
		  }

		  if (posicao == 0) {
		    this.removeDoComeco();
		  } else if (posicao == this.totalDeElementos - 1) {
		    this.removeDoFim();
		  } else {
		    Celula anterior = this.pegaCelula(posicao - 1);
		    Celula atual = anterior.getProxima();
		    Celula proxima = atual.getProxima();
		    
		    anterior.setProxima(proxima);
		    proxima.setAnterior(anterior);
		    
		    this.totalDeElementos--;
		  }
	}

	@Override
	public Celula pegaCelula(int posicao)
	{
		  if(!this.posicaoOcupada(posicao)){
		    throw new IllegalArgumentException("Posição não existe");
		  }

		  Celula atual = primeira;
		  for (int i = 0; i < posicao; i++){
		    atual = atual.getProxima();
		  }
		  return atual;
	}
	
	@Override
	public Object pegaElemento(int posicao)
	{
		  return this.pegaCelula(posicao).getElemento();
	}

	private boolean posicaoOcupada(int posicao){
		  return posicao >= 0 && posicao < this.totalDeElementos;
	}
	

	@Override
	public int tamanho() {
		return this.totalDeElementos;
	}

	@Override
	public boolean contem(Object elemento) 
	{
		Celula atual = this.primeira;

		  while (atual != null) {
		    if (atual.getElemento().equals(elemento)) {
		      return true;
		    }
		    atual = atual.getProxima();
		  }
		  return false;
	}


}